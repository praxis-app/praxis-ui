type ApproveMemberRequestPayload {
  groupMember: User!
}

input CreateGroupInput {
  coverPhoto: Upload
  description: String!
  name: String!
}

type CreateGroupPayload {
  group: Group!
}

input CreateGroupRoleInput {
  color: String!
  groupId: Int!
  name: String!
}

type CreateGroupRolePayload {
  groupRole: GroupRole!
}

input CreateLikeInput {
  postId: Int
}

type CreateLikePayload {
  like: Like!
}

type CreateMemberRequestPayload {
  memberRequest: MemberRequest!
}

input CreatePostInput {
  body: String
  groupId: Int
  images: [Upload!]
}

type CreatePostPayload {
  post: Post!
}

input CreateProposalInput {
  action: ProposalActionInput!
  body: String
  groupId: Int
  images: [Upload!]
}

type CreateProposalPayload {
  proposal: Proposal!
}

input CreateServerInviteInput {
  expiresAt: DateTime
  maxUses: Int
}

type CreateServerInvitePayload {
  serverInvite: ServerInvite!
}

input CreateServerRoleInput {
  color: String!
  name: String!
}

type CreateServerRolePayload {
  serverRole: ServerRole!
}

input CreateVoteInput {
  proposalId: Int!
  voteType: String!
}

type CreateVotePayload {
  vote: Vote!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteGroupRoleMemberInput {
  roleId: Int!
  userId: Int!
}

type DeleteGroupRoleMemberPayload {
  groupRole: GroupRole!
}

input DeleteLikeInput {
  postId: Int
}

input DeleteServerRoleMemberInput {
  roleId: Int!
  userId: Int!
}

type DeleteServerRoleMemberPayload {
  me: User!
  serverRole: ServerRole!
}

union FeedItem = Post | Proposal

type FollowUserPayload {
  followedUser: User!
  follower: User!
}

type Group {
  coverPhoto: Image
  createdAt: DateTime!
  description: String!
  feed: [FeedItem!]!
  id: Int!
  isJoinedByMe: Boolean!
  memberCount: Int!
  memberRequestCount: Int
  memberRequests: [MemberRequest!]
  members: [User!]!
  myPermissions: GroupPermissions!
  name: String!
  posts: [Post!]!
  proposals: [Proposal!]!
  roles: [GroupRole!]!
  settings: GroupConfig!
  updatedAt: DateTime!
}

type GroupConfig {
  createdAt: DateTime!
  group: Group!
  id: Int!
  isPublic: Boolean!
  updatedAt: DateTime!
}

type GroupPermissions {
  approveMemberRequests: Boolean!
  createEvents: Boolean!
  deleteGroup: Boolean!
  manageComments: Boolean!
  manageEvents: Boolean!
  managePosts: Boolean!
  manageRoles: Boolean!
  manageSettings: Boolean!
  removeMembers: Boolean!
  updateGroup: Boolean!
}

type GroupRole {
  availableUsersToAdd: [User!]!
  color: String!
  group: Group!
  id: Int!
  memberCount: Int!
  members: [User!]!
  name: String!
  permissions: GroupRolePermission!
  proposalActionRoles: [ProposalActionRole!]!
}

type GroupRolePermission {
  approveMemberRequests: Boolean!
  createEvents: Boolean!
  deleteGroup: Boolean!
  groupRole: GroupRole!
  id: Int!
  manageComments: Boolean!
  manageEvents: Boolean!
  managePosts: Boolean!
  manageRoles: Boolean!
  manageSettings: Boolean!
  removeMembers: Boolean!
  updateGroup: Boolean!
}

input GroupRolePermissionInput {
  approveMemberRequests: Boolean
  createEvents: Boolean
  deleteGroup: Boolean
  manageComments: Boolean
  manageEvents: Boolean
  managePosts: Boolean
  manageRoles: Boolean
  manageSettings: Boolean
  removeMembers: Boolean
  updateGroup: Boolean
}

type Image {
  createdAt: DateTime!
  filename: String!
  group: Group!
  id: Int!
  imageType: String!
  post: Post!
  proposal: Proposal!
  proposalAction: ProposalAction!
  updatedAt: DateTime!
  user: User!
}

type Like {
  createdAt: DateTime!
  id: Int!
  post: Post!
  updatedAt: DateTime!
  user: User!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  user: User!
}

type MemberRequest {
  createdAt: DateTime!
  group: Group!
  id: Int!
  updatedAt: DateTime!
  user: User!
}

type Mutation {
  approveMemberRequest(id: Int!): ApproveMemberRequestPayload!
  cancelMemberRequest(id: Int!): Boolean!
  createGroup(groupData: CreateGroupInput!): CreateGroupPayload!
  createGroupRole(roleData: CreateGroupRoleInput!): CreateGroupRolePayload!
  createLike(likeData: CreateLikeInput!): CreateLikePayload!
  createMemberRequest(groupId: Int!): CreateMemberRequestPayload!
  createPost(postData: CreatePostInput!): CreatePostPayload!
  createProposal(proposalData: CreateProposalInput!): CreateProposalPayload!
  createServerInvite(serverInviteData: CreateServerInviteInput!): CreateServerInvitePayload!
  createServerRole(roleData: CreateServerRoleInput!): CreateServerRolePayload!
  createVote(voteData: CreateVoteInput!): CreateVotePayload!
  deleteGroup(id: Int!): Boolean!
  deleteGroupRole(id: Int!): Boolean!
  deleteGroupRoleMember(roleMemberData: DeleteGroupRoleMemberInput!): DeleteGroupRoleMemberPayload!
  deleteImage(id: Int!): Boolean!
  deleteLike(likeData: DeleteLikeInput!): Boolean!
  deletePost(id: Int!): Boolean!
  deleteProposal(id: Int!): Boolean!
  deleteServerInvite(id: Int!): Boolean!
  deleteServerRole(id: Int!): Boolean!
  deleteServerRoleMember(roleMemberData: DeleteServerRoleMemberInput!): DeleteServerRoleMemberPayload!
  deleteUser(id: Int!): Boolean!
  deleteVote(id: Int!): Boolean!
  denyMemberRequest(id: Int!): Boolean!
  followUser(id: Int!): FollowUserPayload!
  leaveGroup(id: Int!): Boolean!
  logOut: Boolean!
  login(input: LoginInput!): LoginPayload!
  refreshToken: Boolean!
  signUp(input: SignUpInput!): SignUpPayload!
  unfollowUser(id: Int!): Boolean!
  updateGroup(groupData: UpdateGroupInput!): UpdateGroupPayload!
  updateGroupConfig(groupConfigData: UpdateGroupConfigInput!): UpdateGroupPayload!
  updateGroupRole(roleData: UpdateGroupRoleInput!): UpdateGroupRolePayload!
  updatePost(postData: UpdatePostInput!): UpdatePostPayload!
  updateProposal(proposalData: UpdateProposalInput!): UpdateProposalPayload!
  updateServerRole(roleData: UpdateServerRoleInput!): UpdateServerRolePayload!
  updateUser(userData: UpdateUserInput!): UpdateUserPayload!
  updateVote(voteData: UpdateVoteInput!): UpdateVotePayload!
}

type Post {
  body: String
  createdAt: DateTime!
  group: Group
  id: Int!
  images: [Image!]!
  isLikedByMe: Boolean!
  likes: [Like!]!
  likesCount: Int!
  updatedAt: DateTime!
  user: User!
}

type Proposal {
  action: ProposalAction!
  body: String
  createdAt: DateTime!
  group: Group
  id: Int!
  images: [Image!]!
  stage: String!
  updatedAt: DateTime!
  user: User!
  voteCount: Int!
  votes: [Vote!]!
}

type ProposalAction {
  actionType: String!
  createdAt: DateTime!
  groupCoverPhoto: Image
  groupDescription: String
  groupName: String
  id: Int!
  proposal: Proposal!
  role: ProposalActionRole
  updatedAt: DateTime!
}

input ProposalActionInput {
  actionType: String!
  groupCoverPhoto: Upload
  groupDescription: String
  groupName: String
  role: ProposalActionRoleInput
}

type ProposalActionPermission {
  approveMemberRequests: Boolean!
  createEvents: Boolean!
  deleteGroup: Boolean!
  id: Int!
  manageComments: Boolean!
  manageEvents: Boolean!
  managePosts: Boolean!
  manageRoles: Boolean!
  manageSettings: Boolean!
  removeMembers: Boolean!
  role: ProposalActionRole!
  updateGroup: Boolean!
}

type ProposalActionRole {
  color: String
  groupRole: GroupRole
  id: Int!
  members: [ProposalActionRoleMember!]
  name: String
  oldColor: String
  oldName: String
  permissions: ProposalActionPermission!
  proposalAction: ProposalAction!
}

input ProposalActionRoleInput {
  color: String
  members: [ProposalActionRoleMemberInput!]
  name: String
  permissions: GroupRolePermissionInput
  roleToUpdateId: Int
}

type ProposalActionRoleMember {
  changeType: String!
  createdAt: DateTime!
  id: Int!
  role: ProposalActionRole!
  updatedAt: DateTime!
  user: User!
}

input ProposalActionRoleMemberInput {
  changeType: String!
  userId: Int!
}

type Query {
  authCheck: Boolean!
  group(id: Int, name: String): Group!
  groupRole(id: Int!): GroupRole!
  groupRoles: [GroupRole!]!
  groups: [Group!]!
  isFirstUser: Boolean!
  me: User!
  memberRequest(groupId: Int!): MemberRequest
  post(id: Int!): Post!
  posts: [Post!]!
  proposal(id: Int!): Proposal!
  proposals: [Proposal!]!
  publicGroups: [Group!]!
  publicGroupsFeed: [FeedItem!]!
  serverInvite(token: String!): ServerInvite!
  serverInvites: [ServerInvite!]!
  serverRole(id: Int!): ServerRole!
  serverRoles: [ServerRole!]!
  user(id: Int, name: String): User!
  users: [User!]!
  usersByIds(ids: [Int!]!): [User!]!
  vote(id: Int!): Vote!
  votes: [Vote!]!
}

type ServerInvite {
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  maxUses: Int
  token: String!
  updatedAt: DateTime!
  user: User!
  uses: Int!
}

type ServerPermissions {
  createInvites: Boolean!
  manageComments: Boolean!
  manageEvents: Boolean!
  manageInvites: Boolean!
  managePosts: Boolean!
  manageRoles: Boolean!
  removeMembers: Boolean!
}

type ServerRole {
  availableUsersToAdd: [User!]!
  color: String!
  id: Int!
  memberCount: Int!
  members: [User!]!
  name: String!
  permissions: ServerRolePermission!
}

type ServerRolePermission {
  createInvites: Boolean!
  id: Int!
  manageComments: Boolean!
  manageEvents: Boolean!
  manageInvites: Boolean!
  managePosts: Boolean!
  manageRoles: Boolean!
  removeMembers: Boolean!
  serverRole: ServerRole!
}

input ServerRolePermissionInput {
  banMembers: Boolean!
  createInvites: Boolean!
  manageComments: Boolean!
  manageEvents: Boolean!
  manageInvites: Boolean!
  managePosts: Boolean!
  manageRoles: Boolean!
}

input SignUpInput {
  confirmPassword: String!
  email: String!
  inviteToken: String
  name: String!
  password: String!
  profilePicture: Upload
}

type SignUpPayload {
  user: User!
}

input UpdateGroupConfigInput {
  groupId: Int!
  privacy: String
}

input UpdateGroupInput {
  coverPhoto: Upload
  description: String
  id: Int!
  name: String
}

type UpdateGroupPayload {
  group: Group!
}

input UpdateGroupRoleInput {
  color: String
  id: Int!
  name: String
  permission: GroupRolePermissionInput
  selectedUserIds: [Int!]
}

type UpdateGroupRolePayload {
  groupRole: GroupRole!
}

input UpdatePostInput {
  body: String
  id: Int!
  images: [Upload!]
}

type UpdatePostPayload {
  post: Post!
}

input UpdateProposalInput {
  action: ProposalActionInput!
  body: String
  id: Int!
  images: [Upload!]
}

type UpdateProposalPayload {
  proposal: Proposal!
}

input UpdateServerRoleInput {
  color: String
  id: Int!
  name: String
  permissions: ServerRolePermissionInput
  selectedUserIds: [Int!]
}

type UpdateServerRolePayload {
  me: User!
  serverRole: ServerRole!
}

input UpdateUserInput {
  bio: String!
  coverPhoto: Upload
  id: Int!
  name: String!
  profilePicture: Upload
}

type UpdateUserPayload {
  user: User!
}

input UpdateVoteInput {
  id: Int!
  voteType: String!
}

type UpdateVotePayload {
  vote: Vote!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  bio: String
  coverPhoto: Image
  createdAt: DateTime!
  email: String!
  followerCount: Int!
  followers: [User!]!
  following: [User!]!
  followingCount: Int!
  homeFeed: [FeedItem!]!
  id: Int!
  isFollowedByMe: Boolean!
  joinedGroups: [Group!]!
  likes: [Like!]!
  name: String!
  posts: [Post!]!
  profileFeed: [FeedItem!]!
  profilePicture: Image!
  proposals: [Proposal!]!
  serverPermissions: ServerPermissions!
  updatedAt: DateTime!
}

type Vote {
  createdAt: DateTime!
  id: Int!
  proposal: Proposal!
  updatedAt: DateTime!
  user: User!
  voteType: String!
}